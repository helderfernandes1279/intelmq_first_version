import csv
import StringIO
from intelmq.lib.bot import Bot, sys
from intelmq.lib.message import Event
from intelmq.bots import utils

class ShadowServerIPv6HttpSinkholeParserBot(Bot):

    def process(self):
        report = self.receive_message()

        if report:
            report = report.strip()
            
            columns = {
                "timestamp": "source_time",
                "src_ip": "source_ip",
                "src_asn": "source_asn",
                "src_geo": "source_cc",
		"src_region": "__TBD__",
		"src_port": "source_port",
		"dst_ip": "destination_ip",
		"dst_asn": "destination_asn",
		"dst_geo": "destination_cc",
		"dst_region": "__TBD__",
		"dst_port": "destination_port",
		"protocol": "__TBD__",
		"tag": "malware",
		"hostname": "source_reverse_dns",
		"sysdesc": "__TBD__",
		"sysname": "__TBD__",
		"http_url": "__TBD__",
                "http_agent": "user_agent",
		"http_host": "destination_reverse_dns",
                "http_referer": "__TBD__",
		"http_referer_ip": "__TBD__",
                "http_referer_asn": "__TBD__",
                "http_referer_geo": "__TBD__",
                "http_referer_region": "__TBD__",
                "forwarded_by": "__IGNORE__"
            }
            
            rows = csv.DictReader(StringIO.StringIO(report))
            
            for row in rows:
                event = Event()
                
                for key, value in row.items():

                    if key in columns:
		        key = col

                    if not value or not key in columns:
                        continue

                    value = value.strip()
                    
                    if key is "__IGNORE__" or key is "__TBD__":
                        continue
                    
                    # set timezone explicitly to UTC as it is absent in the input
                    if key == "source_time":
                        value += " UTC"
                    
                    event.add(key, value)
            
                event.add('feed', 'shadowserver-sinkhole-http')
                event.add('type', 'malware')
                event.add('application_protocol', 'http')
                
                event = utils.parse_source_time(event, "source_time")  
                event = utils.generate_observation_time(event, "observation_time")
                event = utils.generate_reported_fields(event)
                
                self.send_message(event)
        self.acknowledge_message()
   

if __name__ == "__main__":
    bot = ShadowServerIPv6HttpSinkholeParserBot(sys.argv[1])
    bot.start()
